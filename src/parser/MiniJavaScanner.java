/* Generated By:JavaCC: Do not edit this line. MiniJavaScanner.java */
package parser;
import syntax.*;
import java.util.ArrayList;
import java.util.List;



public class MiniJavaScanner implements MiniJavaScannerConstants {

/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/
  static final public Program Program() throws ParseException {
    trace_call("Program");
    try {
  MainClass m;
  List <ClassDecl> cl;
      m = MainClass();
      cl = ClassDeclList();
      jj_consume_token(0);
      {if (true) return new Program(m,cl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Program");
    }
  }

  static final public MainClass MainClass() throws ParseException {
    trace_call("MainClass");
    try {
  Token t;
  Identifier i1,i2;
  Statement s;
      t = jj_consume_token(CLASS);
      i1 = Identifier();
      jj_consume_token(LBRACE);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(LSQPAREN);
      jj_consume_token(RSQPAREN);
      i2 = Identifier();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      s = Statement();
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
    {if (true) return new MainClass(t.beginLine,t.beginColumn,i1,i2,s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MainClass");
    }
  }

  static final public List <ClassDecl> ClassDeclList() throws ParseException {
    trace_call("ClassDeclList");
    try {
  List <ClassDecl> cl = new ArrayList <ClassDecl>();
  ClassDecl c;
      c = ClassDecl();
                 cl.add(c);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        c = ClassDecl();
                 cl.add(c);
      }
          {if (true) return cl;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClassDeclList");
    }
  }

  static final public ClassDecl ClassDecl() throws ParseException {
    trace_call("ClassDecl");
    try {
 ClassDecl c;
      if (jj_2_1(2147483647)) {
        c = SimpleClassDecl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          c = ExtendingClassDecl();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return c;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ClassDecl");
    }
  }

  static final public SimpleClassDecl SimpleClassDecl() throws ParseException {
    trace_call("SimpleClassDecl");
    try {
  Identifier i;
  List <VarDecl> vl;
  List <MethodDecl> ml;
      jj_consume_token(CLASS);
      i = Identifier();
      jj_consume_token(LBRACE);
      vl = VarDeclList();
      ml = MethodDeclList();
      jj_consume_token(RBRACE);
          {if (true) return new SimpleClassDecl(i,vl,ml);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SimpleClassDecl");
    }
  }

  static final public ExtendingClassDecl ExtendingClassDecl() throws ParseException {
    trace_call("ExtendingClassDecl");
    try {
  Identifier i,j;
  List <VarDecl> vl;
  List <MethodDecl> ml;
      jj_consume_token(CLASS);
      i = Identifier();
      jj_consume_token(EXTENDS);
      j = Identifier();
      jj_consume_token(LBRACE);
      vl = VarDeclList();
      ml = MethodDeclList();
      jj_consume_token(RBRACE);
          {if (true) return new ExtendingClassDecl(i,j,vl,ml);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExtendingClassDecl");
    }
  }

  static final public List <VarDecl> VarDeclList() throws ParseException {
    trace_call("VarDeclList");
    try {
  List <VarDecl> cl = new ArrayList <VarDecl>();
  VarDecl c;
      label_2:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_2;
        }
        c = VarDecl();
                 cl.add(c);
      }
          {if (true) return cl;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VarDeclList");
    }
  }

  static final public List <MethodDecl> MethodDeclList() throws ParseException {
    trace_call("MethodDeclList");
    try {
  List <MethodDecl> ml = new ArrayList <MethodDecl>();
  MethodDecl m;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        m = MethodDecl();
                 ml.add(m);
      }
          {if (true) return ml;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodDeclList");
    }
  }

  static final public VarDecl VarDecl() throws ParseException {
    trace_call("VarDecl");
    try {
  Type t;
  Identifier i;
      t = Type();
      i = Identifier();
      jj_consume_token(SEMICOLON);
           {if (true) return new VarDecl(t,i);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VarDecl");
    }
  }

  static final public MethodDecl MethodDecl() throws ParseException {
    trace_call("MethodDecl");
    try {
  Type t;
  Identifier i;
  List <Formal> fl;
  List <VarDecl> vl;
  List <Statement> sl;
  Expression e;
      jj_consume_token(PUBLIC);
      t = Type();
      i = Identifier();
      jj_consume_token(LPAREN);
      fl = FormalList();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      vl = VarDeclList();
      sl = StatementList();
      jj_consume_token(RETURN);
      e = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);
          {if (true) return new MethodDecl(t,i,fl,vl,sl,e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MethodDecl");
    }
  }

  static final public Formal Formal() throws ParseException {
    trace_call("Formal");
    try {
  Type t;
  Identifier i;
      t = Type();
      i = Identifier();
          {if (true) return new Formal(t,i);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Formal");
    }
  }

  static final public List <Formal> FormalList() throws ParseException {
    trace_call("FormalList");
    try {
  List <Formal> fl=new ArrayList <Formal>();
  Formal f;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        f = Formal();
                 fl.add(f);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          f = Formal();
                 fl.add(f);
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
          {if (true) return fl;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FormalList");
    }
  }

  static final public Type Type() throws ParseException {
    trace_call("Type");
    try {
 Type t;
      if (jj_2_3(2147483647)) {
        t = IntArrayType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
          t = BooleanType();
          break;
        case INTEGER:
          t = IntegerType();
          break;
        case IDENTIFIER:
          t = IdentifierType();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Type");
    }
  }

  static final public IntArrayType IntArrayType() throws ParseException {
    trace_call("IntArrayType");
    try {
      jj_consume_token(INTEGER);
      jj_consume_token(LSQPAREN);
      jj_consume_token(RSQPAREN);
          {if (true) return Type.THE_INT_ARRAY_TYPE;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IntArrayType");
    }
  }

  static final public BooleanType BooleanType() throws ParseException {
    trace_call("BooleanType");
    try {
      jj_consume_token(BOOLEAN);
          {if (true) return Type.THE_BOOLEAN_TYPE;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BooleanType");
    }
  }

  static final public IntegerType IntegerType() throws ParseException {
    trace_call("IntegerType");
    try {
      jj_consume_token(INTEGER);
          {if (true) return Type.THE_INTEGER_TYPE;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IntegerType");
    }
  }

  static final public IdentifierType IdentifierType() throws ParseException {
    trace_call("IdentifierType");
    try {
 Token t;
      t = jj_consume_token(IDENTIFIER);
          {if (true) return new IdentifierType(t.beginLine,t.beginColumn,t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IdentifierType");
    }
  }

  static final public Block Block() throws ParseException {
    trace_call("Block");
    try {
 List <Statement> sl;
      jj_consume_token(LBRACE);
      sl = StatementList();
      jj_consume_token(RBRACE);
          {if (true) return new Block(sl);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Block");
    }
  }

  static final public If If() throws ParseException {
    trace_call("If");
    try {
  Expression e;
  Statement s1,s2;
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
          {if (true) return new If(e,s1,s2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("If");
    }
  }

  static final public While While() throws ParseException {
    trace_call("While");
    try {
  Expression e;
  Statement s;
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
      s = Statement();
          {if (true) return new While(e,s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("While");
    }
  }

  static final public Print Print() throws ParseException {
    trace_call("Print");
    try {
 Expression e;
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
          {if (true) return new Print(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Print");
    }
  }

  static final public Assign Assign() throws ParseException {
    trace_call("Assign");
    try {
  Identifier i;
  Expression e;
      i = Identifier();
      jj_consume_token(ASSIGN);
      e = Expression();
      jj_consume_token(SEMICOLON);
          {if (true) return new Assign(i.lineNumber,i.columnNumber,i,e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Assign");
    }
  }

  static final public ArrayAssign ArrayAssign() throws ParseException {
    trace_call("ArrayAssign");
    try {
  Identifier i;
  Expression e1,e2;
      i = Identifier();
      jj_consume_token(LSQPAREN);
      e1 = Expression();
      jj_consume_token(RSQPAREN);
      jj_consume_token(ASSIGN);
      e2 = Expression();
      jj_consume_token(SEMICOLON);
          {if (true) return new ArrayAssign(i,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ArrayAssign");
    }
  }

  static final public And And() throws ParseException {
    trace_call("And");
    try {
  Expression e1,e2;
      e1 = BasicExpression();
      jj_consume_token(AND);
      e2 = Expression();
          {if (true) return new And(e1.lineNumber,e1.columnNumber,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("And");
    }
  }

  static final public LessThan LessThan() throws ParseException {
    trace_call("LessThan");
    try {
  Expression e1, e2;
      e1 = BasicExpression();
      jj_consume_token(LT);
      e2 = Expression();
          {if (true) return new LessThan(e1.lineNumber,e1.columnNumber,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("LessThan");
    }
  }

  static final public Plus Plus() throws ParseException {
    trace_call("Plus");
    try {
  Expression e1, e2;
      e1 = BasicExpression();
      jj_consume_token(PLUS);
      e2 = Expression();
          {if (true) return new Plus(e1.lineNumber,e1.columnNumber,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Plus");
    }
  }

  static final public Minus Minus() throws ParseException {
    trace_call("Minus");
    try {
  Expression e1, e2;
      e1 = BasicExpression();
      jj_consume_token(MINUS);
      e2 = Expression();
          {if (true) return new Minus(e1.lineNumber,e1.columnNumber,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Minus");
    }
  }

  static final public Times Times() throws ParseException {
    trace_call("Times");
    try {
  Expression e1, e2;
      e1 = BasicExpression();
      jj_consume_token(MULT);
      e2 = Expression();
          {if (true) return new Times(e1.lineNumber,e1.columnNumber,e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Times");
    }
  }

  static final public ArrayLookup ArrayLookup() throws ParseException {
    trace_call("ArrayLookup");
    try {
  Expression e1, e2;
      e1 = BasicExpression();
      jj_consume_token(LSQPAREN);
      e2 = Expression();
      jj_consume_token(RSQPAREN);
          {if (true) return new ArrayLookup(e1,e2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ArrayLookup");
    }
  }

  static final public ArrayLength ArrayLength() throws ParseException {
    trace_call("ArrayLength");
    try {
 Expression e;
      e = BasicExpression();
      jj_consume_token(DOT);
      jj_consume_token(LENGTH);
          {if (true) return new ArrayLength(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ArrayLength");
    }
  }

  static final public Call Call() throws ParseException {
    trace_call("Call");
    try {
  Expression e;
  Identifier i;
  List <Expression> el= new ArrayList <Expression>();
      e = BasicExpression();
      jj_consume_token(DOT);
      i = Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case NOT:
      case FALSE:
      case NEW:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        el = ExpressionList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
          {if (true) return new Call(e.lineNumber,e.columnNumber,e,i,el);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Call");
    }
  }

  static final public IntegerLiteral IntegerLiteral() throws ParseException {
    trace_call("IntegerLiteral");
    try {
 Token t;
      t = jj_consume_token(INTEGER_LITERAL);
         {if (true) return new IntegerLiteral(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IntegerLiteral");
    }
  }

  static final public True True() throws ParseException {
    trace_call("True");
    try {
 Token t;
      t = jj_consume_token(TRUE);
          {if (true) return new True(t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("True");
    }
  }

  static final public False False() throws ParseException {
    trace_call("False");
    try {
 Token t;
      t = jj_consume_token(FALSE);
          {if (true) return new False(t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("False");
    }
  }

  static final public IdentifierExp IdentifierExp() throws ParseException {
    trace_call("IdentifierExp");
    try {
 Token t;
      t = jj_consume_token(IDENTIFIER);
         {if (true) return new IdentifierExp(t.beginLine,t.beginColumn,t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("IdentifierExp");
    }
  }

  static final public This This() throws ParseException {
    trace_call("This");
    try {
 Token t;
      t = jj_consume_token(THIS);
          {if (true) return new This(t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("This");
    }
  }

  static final public NewArray NewArray() throws ParseException {
    trace_call("NewArray");
    try {
 Expression e;
      jj_consume_token(NEW);
      jj_consume_token(INTEGER);
      jj_consume_token(LSQPAREN);
      e = Expression();
      jj_consume_token(RSQPAREN);
          {if (true) return new NewArray(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NewArray");
    }
  }

  static final public NewObject NewObject() throws ParseException {
    trace_call("NewObject");
    try {
 Identifier i;
      jj_consume_token(NEW);
      i = Identifier();
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
          {if (true) return new NewObject(i);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("NewObject");
    }
  }

  static final public Not Not() throws ParseException {
    trace_call("Not");
    try {
 Expression e;
      jj_consume_token(NOT);
      e = Expression();
         {if (true) return new Not(e);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Not");
    }
  }

  static final public Identifier Identifier() throws ParseException {
    trace_call("Identifier");
    try {
 Token t;
      t = jj_consume_token(IDENTIFIER);
         {if (true) return new Identifier(t.beginLine,t.beginColumn,t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Identifier");
    }
  }

  static final public Statement Statement() throws ParseException {
    trace_call("Statement");
    try {
 Statement s;
      if (jj_2_4(2147483647)) {
        s = Block();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          s = If();
          break;
        case WHILE:
          s = While();
          break;
        case PRINT:
          s = Print();
          break;
        default:
          jj_la1[7] = jj_gen;
          if (jj_2_5(2147483647)) {
            s = Assign();
          } else if (jj_2_6(2147483647)) {
            s = ArrayAssign();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Statement");
    }
  }

  static final public List <Statement> StatementList() throws ParseException {
    trace_call("StatementList");
    try {
  List <Statement> sl=new ArrayList<Statement>();
  Statement s;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
        case IF:
        case WHILE:
        case PRINT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        s = Statement();
            sl.add(s);
      }
          {if (true) return sl;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("StatementList");
    }
  }

  static final public Expression Expression() throws ParseException {
    trace_call("Expression");
    try {
 Expression e;
      if (jj_2_7(2147483647)) {
        e = And();
      } else if (jj_2_8(2147483647)) {
        e = LessThan();
      } else if (jj_2_9(2147483647)) {
        e = Plus();
      } else if (jj_2_10(2147483647)) {
        e = Minus();
      } else if (jj_2_11(2147483647)) {
        e = Times();
      } else if (jj_2_12(2147483647)) {
        e = ArrayLookup();
      } else if (jj_2_13(2147483647)) {
        e = ArrayLength();
      } else if (jj_2_14(2147483647)) {
        e = Call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case NOT:
        case FALSE:
        case NEW:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          e = BasicExpression();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Expression");
    }
  }

  static final public Expression BasicExpression() throws ParseException {
    trace_call("BasicExpression");
    try {
 Expression e;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        e = IntegerLiteral();
        break;
      case TRUE:
        e = True();
        break;
      case FALSE:
        e = False();
        break;
      case IDENTIFIER:
        e = IdentifierExp();
        break;
      case THIS:
        e = This();
        break;
      case NOT:
        e = Not();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e = Expression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[10] = jj_gen;
        if (jj_2_15(2147483647)) {
          e = NewObject();
        } else if (jj_2_16(2147483647)) {
          e = NewArray();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
 {if (true) return e;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("BasicExpression");
    }
  }

  static final public List <Expression> ExpressionList() throws ParseException {
    trace_call("ExpressionList");
    try {
  List <Expression> el= new ArrayList <Expression>();
  Expression e;
      e = Expression();
         el.add(e);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        e = Expression();
         el.add(e);
      }
    {if (true) return el;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ExpressionList");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(LT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(LSQPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RSQPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaScannerTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x4000000,0x0,0x10000,0x2000000,0x2000000,0x41000200,0x80000000,0x80002000,0x41000200,0x41000200,0x10000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x20,0x0,0x4002,0x4002,0x6610,0x801,0x4801,0x6610,0x6600,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[16];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaScanner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaScanner(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaScanner(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaScanner(MiniJavaScannerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
