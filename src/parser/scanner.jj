options{  JAVA_UNICODE_ESCAPE = true;  DEBUG_PARSER = true;}PARSER_BEGIN(MiniJavaScanner)package parser;import syntax.*;import java.util.ArrayList;import java.util.List;public class MiniJavaScanner{}PARSER_END(MiniJavaScanner)SKIP : /* WHITE SPACE */{  " "| "\t"| "\n"| "\r"| "\f"}SPECIAL_TOKEN : /* COMMENTS */{  < SINGLE_LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < FORMAL_COMMENT :    "/**" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < LSQPAREN : "[" >| < RSQPAREN : "]" >| < LBRACE : "{" >| < RBRACE : "}" >| < SEMICOLON : ";" >| < COMMA : "," >| < DOT : "." >| < ASSIGN : "=" >| < LT : "<" >| < PLUS : "+" >| < MINUS : "-" >| < MULT : "*" >| < AND : "&&" >| < NOT : "!" >| < BOOLEAN : "boolean" >| < CLASS : "class" >| < INTERFACE : "interface" >| < ELSE : "else" >| < EXTENDS : "extends" >| < FALSE : "false" >| < IF : "if" >| < WHILE : "while" >| < INTEGER : "int" >| < LENGTH : "length" >| < MAIN : "main" >| < NEW : "new" >| < PUBLIC : "public" >| < RETURN : "return" >| < STATIC : "static" >| < STRING : "String" >| < THIS : "this" >| < TRUE : "true" >| < PRINT : "System.out.println" >| < VOID : "void" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    (      [ "1"-"9" ] ([ "0"-"9" ])*    | "0"    ) >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z","A"-"Z","_" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN : /*INVALID*/{  < INVALID : ~[ " ", "\t", "\n", "\b", "\f", "\r" ] >}/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/Program Program():{  MainClass m;  List <ClassDecl> cl;}{    m=MainClass() cl=ClassDeclList() <EOF>    {      return new Program(m,cl);    }}MainClass MainClass():{  Token t;  Identifier i1,i2;  Statement s;}{  t=<CLASS>  i1=Identifier()  "{"  <PUBLIC>  <STATIC>  <VOID>  <MAIN>  "("  "String"  "["  "]"  i2=Identifier()  ")"  "{" (s=Statement()) "}"   "}"  {    return new MainClass(t.beginLine,t.beginColumn,i1,i2,s);  }}List <ClassDecl> ClassDeclList():{  List <ClassDecl> cl = new ArrayList <ClassDecl>();  ClassDecl c;}{  	c=ClassDecl()		{cl.add(c);}	(c=ClassDecl()		{cl.add(c);}	)*	{	  return cl;	}}ClassDecl ClassDecl():{ClassDecl c;}{	(	 LOOKAHEAD(SimpleClassDecl())c=SimpleClassDecl()	|LOOKAHEAD(ExtendingClassDecl())c=ExtendingClassDecl()	)	{	  return c;	}}SimpleClassDecl SimpleClassDecl():{  Identifier i;  List <VarDecl> vl;  List <MethodDecl> ml;}{	"class"  i=Identifier() "{"	vl=VarDeclList()	ml=MethodDeclList()  	"}"  	{  	  return new SimpleClassDecl(i,vl,ml);  	}}ExtendingClassDecl ExtendingClassDecl():{  Identifier i,j;  List <VarDecl> vl;  List <MethodDecl> ml;}{	"class"  i=Identifier()   "extends"  j=Identifier()   "{"	vl=VarDeclList()	ml=MethodDeclList()  	"}"  	{  	  return new ExtendingClassDecl(i,j,vl,ml);  	}}List <VarDecl> VarDeclList():{  List <VarDecl> cl = new ArrayList <VarDecl>();  VarDecl c;}{	(LOOKAHEAD(VarDecl())c=VarDecl()		{cl.add(c);}	)*	{	  return cl;	}}List <MethodDecl> MethodDeclList():{  List <MethodDecl> ml = new ArrayList <MethodDecl>();  MethodDecl m;}{	(m=MethodDecl()		{ml.add(m);}	)*	{	  return ml;	}}VarDecl VarDecl():{  Type t;  Identifier i;}{	 t=Type() i=Identifier()  ";"	 {	   return new VarDecl(t,i);	 }}MethodDecl MethodDecl():{  Type t;  Identifier i;  List <Formal> fl;  List <VarDecl> vl;  List <Statement> sl;  Expression e;}{	"public"  t=Type()  i=Identifier()  "(" fl=FormalList()  ")"  "{"  	vl=VarDeclList()  	sl=StatementList()  "return"  e=Expression()  ";"  "}"	{	  return new MethodDecl(t,i,fl,vl,sl,e);	}}Formal Formal():{  Type t;  Identifier i;}{	t=Type() i=Identifier()	{	  return new Formal(t,i);	}}List <Formal> FormalList():{  List <Formal> fl=new ArrayList <Formal>();  Formal f;}{  	(  	  f=Formal()		{fl.add(f);}	("," f=Formal()		{fl.add(f);}	)*)?	{	  return fl;	}}Type Type():{Type t;}{ 	( 	  LOOKAHEAD(IntArrayType()) t=IntArrayType() 	|t=BooleanType() 	|t=IntegerType() 	|t=IdentifierType()) 	{ 	  return t; 	}}IntArrayType IntArrayType():{}{	"int" "[" "]"	{	  return Type.THE_INT_ARRAY_TYPE;	}}BooleanType BooleanType():{}{	"boolean"	{	  return Type.THE_BOOLEAN_TYPE;	}}IntegerType IntegerType():{}{	"int"	{	  return Type.THE_INTEGER_TYPE;	}}IdentifierType IdentifierType():{Token t;}{	t=<IDENTIFIER>	{	  return new IdentifierType(t.beginLine,t.beginColumn,t.image);	}}Block Block():{List <Statement> sl;}{	"{"	sl=StatementList()	"}"	{	  return new Block(sl);	}}If If():{  Expression e;  Statement s1,s2;}{	"if"  "("  e=Expression()  ")"  s1=Statement()  "else"  s2=Statement()	{	  return new If(e,s1,s2);	}}While While():{  Expression e;  Statement s;}{	"while"  "("  e=Expression()  ")"  s=Statement()	{	  return new While(e,s);	}}Print Print():{Expression e;}{	"System.out.println"  "("   e=Expression()  ")"  ";"	{	  return new Print(e);	}}Assign Assign():{  Identifier i;  Expression e;}{	i=Identifier() "=" e=Expression() ";"	{	  return new Assign(i.lineNumber,i.columnNumber,i,e);	}}ArrayAssign ArrayAssign():{  Identifier i;  Expression e1,e2;}{	i=Identifier() "[" e1=Expression() "]" "=" e2=Expression() ";"	{	  return new ArrayAssign(i,e1,e2);	}}And And():{  Expression e1,e2;}{	e1=BasicExpression() "&&" e2=Expression()	{	  return new And(e1.lineNumber,e1.columnNumber,e1,e2);	}}LessThan LessThan():{  Expression e1, e2;}{	e1=BasicExpression() "<" e2=Expression()	{	  return new LessThan(e1.lineNumber,e1.columnNumber,e1,e2);	}}Plus Plus():{  Expression e1, e2;}{	e1=BasicExpression() "+" e2=Expression()	{	  return new Plus(e1.lineNumber,e1.columnNumber,e1,e2);	}}Minus Minus():{  Expression e1, e2;}{	e1=BasicExpression() "-" e2=Expression()	{	  return new Minus(e1.lineNumber,e1.columnNumber,e1,e2);	}}Times Times():{  Expression e1, e2;}{	e1=BasicExpression() "*" e2=Expression()	{	  return new Times(e1.lineNumber,e1.columnNumber,e1,e2);	}}ArrayLookup ArrayLookup():{  Expression e1, e2;}{	e1=BasicExpression() "[" e2=Expression() "]"	{	  return new ArrayLookup(e1,e2);	}}ArrayLength ArrayLength():{Expression e;}{	e=BasicExpression() "." "length"	{	  return new ArrayLength(e);	}}Call Call():{  Expression e;  Identifier i;  List <Expression> el= new ArrayList <Expression>();}{	e=BasicExpression() "." i=Identifier() "(" (el=ExpressionList())?")"	{	  return new Call(e.lineNumber,e.columnNumber,e,i,el);	}}IntegerLiteral IntegerLiteral():{Token t;}{	t=<INTEGER_LITERAL>	{return new IntegerLiteral(Integer.parseInt(t.image));}}True True():{Token t;}{	t=<TRUE>	{	  return new True(t.beginLine,t.beginColumn);	}}False False():{Token t;}{	t=<FALSE>	{	  return new False(t.beginLine,t.beginColumn);	}}IdentifierExp IdentifierExp():{Token t;}{	t=<IDENTIFIER>	{return new IdentifierExp(t.beginLine,t.beginColumn,t.image);}}This This():{Token t;}{	t=<THIS>	{	  return new This(t.beginLine,t.beginColumn);	}}NewArray NewArray():{Expression e;}{	"new" "int"  "["  e=Expression()  "]"	{	  return new NewArray(e);	}}NewObject NewObject():{Identifier i;}{	"new" i=Identifier() "("  ")"	{	  return new NewObject(i);	}}Not Not():{Expression e;}{	"!" 	e=Expression()	{return new Not(e);}}Identifier Identifier():{Token t;}{	t=<IDENTIFIER>	{return new Identifier(t.beginLine,t.beginColumn,t.image);}}Statement Statement():{Statement s;}{  (    LOOKAHEAD(Block())s=Block()  |s=If()  |s=While()  |s=Print()  |LOOKAHEAD(Assign())s=Assign()  |LOOKAHEAD(ArrayAssign())s=ArrayAssign())  {return s;}}List <Statement> StatementList():{  List <Statement> sl=new ArrayList<Statement>();  Statement s;}{	(	  s=Statement()	  {	    sl.add(s);	  }	)*	{	  return sl;	}}Expression Expression():{Expression e;}{	(	  LOOKAHEAD(And())e=And()	|LOOKAHEAD(LessThan())e=LessThan()	|LOOKAHEAD(Plus())e=Plus()	|LOOKAHEAD(Minus())e=Minus()	|LOOKAHEAD(Times())e=Times()	|LOOKAHEAD(ArrayLookup())e=ArrayLookup()	|LOOKAHEAD(ArrayLength())e=ArrayLength()	|LOOKAHEAD(Call())e=Call()	|e=BasicExpression())	{return e;}}Expression BasicExpression():{Expression e;}{	(	  e=IntegerLiteral()	|e=True()	|e=False()	|e=IdentifierExp()	|e=This()	|e=Not()	|(<LPAREN> e=Expression() <RPAREN>)	|LOOKAHEAD(NewObject())e=NewObject()	|LOOKAHEAD(NewArray())e=NewArray()){return e;}	}List <Expression> ExpressionList():{  List <Expression> el= new ArrayList <Expression>();  Expression e;}{ e=Expression() 	{el.add(e);} ("," e=Expression()   	{el.add(e);} )* {    return el;  }}